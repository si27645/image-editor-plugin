// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OSPhotoEditor
import AVFoundation
import Foundation
@_exported import OSPhotoEditor
import Swift
import UIKit
import _Concurrency
extension UIKit.UIImage {
  public func suitableSize(heightLimit: CoreGraphics.CGFloat? = nil, widthLimit: CoreGraphics.CGFloat? = nil) -> CoreGraphics.CGSize?
}
@objc public protocol CropViewControllerDelegate {
  @objc func cropViewController(_ controller: OSPhotoEditor.CropViewController, didFinishCroppingImage image: UIKit.UIImage, transform: CoreGraphics.CGAffineTransform, cropRect: CoreGraphics.CGRect)
  @objc func cropViewControllerDidCancel(_ controller: OSPhotoEditor.CropViewController)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class CropViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: OSPhotoEditor.CropViewControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) open var image: UIKit.UIImage? {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var keepAspectRatio: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var cropAspectRatio: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var cropRect: CoreGraphics.CGRect {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var imageCropRect: CoreGraphics.CGRect {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var toolbarHidden: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var rotationEnabled: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var rotationTransform: CoreGraphics.CGAffineTransform {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var zoomedCropRect: CoreGraphics.CGRect {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func resetCropRect()
  @objc @_Concurrency.MainActor(unsafe) open func resetCropRectAnimated(_ animated: Swift.Bool)
  @objc deinit
}
extension OSPhotoEditor.PhotoEditorViewController : OSPhotoEditor.CropViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func cropViewController(_ controller: OSPhotoEditor.CropViewController, didFinishCroppingImage image: UIKit.UIImage, transform: CoreGraphics.CGAffineTransform, cropRect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func cropViewControllerDidCancel(_ controller: OSPhotoEditor.CropViewController)
}
@objc public protocol PhotoEditorDelegate {
  @objc func doneEditing(image: UIKit.UIImage)
  @objc func canceledEditing()
}
public enum control {
  case crop
  case sticker
  case draw
  case text
  case save
  case share
  case clear
  public static func == (a: OSPhotoEditor.control, b: OSPhotoEditor.control) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OSPhotoEditor.PhotoEditorViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
extension OSPhotoEditor.PhotoEditorViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class CropView : UIKit.UIView, UIKit.UIScrollViewDelegate, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) open var image: UIKit.UIImage? {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var imageView: UIKit.UIView? {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var croppedImage: UIKit.UIImage? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var keepAspectRatio: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var cropAspectRatio: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var rotation: CoreGraphics.CGAffineTransform {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var rotationAngle: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var cropRect: CoreGraphics.CGRect {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var imageCropRect: CoreGraphics.CGRect {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var resizeEnabled: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var showCroppedArea: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open var rotationGestureRecognizer: UIKit.UIRotationGestureRecognizer!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func setRotationAngle(_ rotationAngle: CoreGraphics.CGFloat, snap: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func resetCropRect()
  @objc @_Concurrency.MainActor(unsafe) open func resetCropRectAnimated(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func zoomedCropRect() -> CoreGraphics.CGRect
  @objc @_Concurrency.MainActor(unsafe) open func croppedImage(_ image: UIKit.UIImage) -> UIKit.UIImage
  @_Concurrency.MainActor(unsafe) @objc open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
  @_Concurrency.MainActor(unsafe) @objc open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
extension OSPhotoEditor.PhotoEditorViewController : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidEndEditing(_ textView: UIKit.UITextView)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class PhotoEditorViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public var stickers: [UIKit.UIImage]
  @objc @_Concurrency.MainActor(unsafe) public var colors: [UIKit.UIColor]
  @objc @_Concurrency.MainActor(unsafe) public var photoEditorDelegate: OSPhotoEditor.PhotoEditorDelegate?
  @_Concurrency.MainActor(unsafe) public var hiddenControls: [OSPhotoEditor.control]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
